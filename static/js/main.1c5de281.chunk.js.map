{"version":3,"sources":["redux/actions/ActionTypes.ts","redux/actions/Actions.ts","utils/serverUtils.ts","components/landing/RoomConnect.tsx","components/landing/Landing.tsx","components/room/PlayerList.tsx","components/room/ColourPicker.tsx","components/room/Room.tsx","components/canvas/Palette.tsx","components/canvas/Canvas.tsx","components/game/GuessSpyPanel.tsx","components/game/InfoPanel.tsx","components/game/Timer.tsx","components/game/GameEnd.tsx","components/game/Game.tsx","utils/sessionStorageUtils.ts","App.tsx","serviceWorker.ts","redux/reducers/RootReducer.ts","index.tsx","redux/datastore/StoreManager.ts"],"names":["SET_ROOM","SET_NAME","ADD_PLAYER","SET_PLAYER_COLOUR","SET_POSSIBLE_ROLES","SET_ROLE","ADD_LINES","SET_PLAYING","SET_TIME","SET_ACTIVE_PLAYER","SET_GAME_WORD","SET_GUESSING","SET_CORRECT_GUESS","END_GAME","SET_STATE","Actions","setRoom","room","type","ActionTypes","payload","setName","name","setPlayers","names","setPlayerColour","playerName","colour","setPossibleRoles","roles","setRole","role","setPlaying","playing","setTime","time","addLines","lines","setActivePlayer","currentPlayerPosition","setGameWord","word","startGuess","player","guessing","endGuess","submitGuess","correct","endGame","spy","setState","state","protocol","window","location","socket","WebSocket","pingServer","a","Promise","resolve","addEventListener","catch","e","console","error","submitLines","code","strokeStyle","lineWidth","content","send","JSON","stringify","listenForMessage","callback","event","data","parse","ClassName","RoomConnect","dispatch","useDispatch","useState","setCode","history","useHistory","className","TextField","value","color","placeholder","onChange","target","fullWidth","inputProps","style","fontSize","Button","variant","onClick","submitRoomCode","push","generateRoomCode","Landing","log","connect","players","playerColourMap","Consumer","store","getState","background","map","index","key","colours","setColour","roomCode","obj","id","isColourAvailable","useLocation","pathname","startRoomGame","Palette","props","setColor","setStrokeStyle","setLineWidth","width","height","Canvas","useSelector","canvasLines","canvas","ctx","line","startX","startY","endX","endY","linesToSend","alreadySent","pressedFlag","useEffect","document","getElementById","canDraw","setCanvas","handleMouseMove","handleMouseDown","handleMouseUp","handleMouseOut","addLinesFromServer","removeEventListener","setTimeout","adjustedLines","resizeLinesForServer","clientX","offsetLeft","clientY","offsetTop","touches","beginPath","fillStyle","fillRect","closePath","preventDefault","Object","assign","draw","onEndStroke","moveTo","lineTo","stroke","resizeLinesForCanvas","getContext","canvasWidth","innerWidth","canvasHeight","innerHeight","onresize","border","showPalette","position","top","left","GuessSpyPanel","onSubmit","guessedName","onClose","Modal","open","aria-labelledby","aria-describedby","guessingPlayer","playerNames","backgroundColor","InfoPanel","onGuessPressed","Timer","startingSeconds","timerSeconds","setTimerSeconds","gameEnded","seconds","minutes","Math","floor","remainingSeconds","minutesDisplay","secondsDisplay","convertSecondsToTimer","GameEnd","guessedSpy","EXTRA_ROLES","roleName","roleCount","Game","gameState","gameWord","possibleRoles","activePlayer","length","info","sessionStorage","setItem","SessionStorageKey","SessionStorageUtils","playerCount","keys","totalExtraRoles","defaultRole","allRoles","concat","getRole","getGameWord","getFirstPlayer","getItem","isActivePlayer","endTurn","App","connected","setConnected","success","handleServerMessage","attemptConnection","message","linesFromPlayer","exact","path","Boolean","hostname","match","initialState","RootReducer","action","isGuessing","partialState","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c5de281.chunk.js","sourcesContent":["export const SET_ROOM = \"SET_ROOM\";\r\nexport const SET_NAME = \"SET_NAME\";\r\nexport const ADD_PLAYER = \"ADD_PLAYER\";\r\nexport const SET_PLAYER_COLOUR = \"SET_PLAYER_COLOUR\";\r\nexport const SET_POSSIBLE_ROLES = \"SET_POSSIBLE_ROLES\";\r\nexport const SET_ROLE = \"SET_ROLE\";\r\nexport const ADD_LINES = \"ADD_LINES\";\r\nexport const SET_PLAYING = \"SET_PLAYING\";\r\nexport const SET_TIME = \"SET_TIME\";\r\nexport const SET_PLAYER_ORDER = \"SET_PLAYER_ORDER\";\r\nexport const SET_ACTIVE_PLAYER = \"SET_ACTIVE_PLAYER\";\r\nexport const SET_GAME_WORD = \"SET_GAME_WORD\";\r\nexport const SET_GUESSING = \"SET_GUESSING\";\r\nexport const SET_CORRECT_GUESS = \"SET_CORRECT_GUESS\";\r\nexport const END_GAME = \"END_GAME\";\r\nexport const SET_STATE = \"SET_STATE\";\r\n","import * as ActionTypes from \"./ActionTypes\";\r\nimport { ILineFromPlayer, IPlayerRole, IPlayerState } from \"../../interfaces/Interfaces\";\r\n\r\nconst Actions = {\r\n  setRoom: (room: string) => {\r\n    return {\r\n      type: ActionTypes.SET_ROOM,\r\n      payload: room\r\n    }\r\n  },\r\n\r\n  setName: (name: string) => {\r\n    return {\r\n      type: ActionTypes.SET_NAME,\r\n      payload: name\r\n    }\r\n  },\r\n\r\n  setPlayers: (names: string[]) => {\r\n    return {\r\n      type: ActionTypes.ADD_PLAYER,\r\n      payload: names\r\n    }\r\n  },\r\n\r\n  setPlayerColour: (playerName: string, colour: string) => {\r\n    return {\r\n      type: ActionTypes.SET_PLAYER_COLOUR,\r\n      payload: {\r\n        playerName: playerName,\r\n        colour: colour\r\n      }\r\n    }\r\n  },\r\n\r\n  setPossibleRoles: (roles: IPlayerRole[]) => {\r\n    return {\r\n      type: ActionTypes.SET_POSSIBLE_ROLES,\r\n      payload: roles\r\n    }\r\n  },\r\n\r\n  setRole: (role: string) => {\r\n    return {\r\n      type: ActionTypes.SET_ROLE,\r\n      payload: role\r\n    }\r\n  },\r\n\r\n  setPlaying: (playing: boolean) => {\r\n    return {\r\n      type: ActionTypes.SET_PLAYING,\r\n      payload: playing\r\n    }\r\n  },\r\n\r\n  setTime: (time: number) => {\r\n    return {\r\n      type: ActionTypes.SET_TIME,\r\n      payload: time\r\n    }\r\n  },\r\n\r\n  addLines: (lines: ILineFromPlayer[]) => {\r\n    return {\r\n      type: ActionTypes.ADD_LINES,\r\n      payload: lines\r\n    }\r\n  },\r\n\r\n  setActivePlayer: (currentPlayerPosition: number) => {\r\n    return {\r\n      type: ActionTypes.SET_ACTIVE_PLAYER,\r\n      payload: currentPlayerPosition\r\n    }\r\n  },\r\n\r\n  setGameWord: (word: string) => {\r\n    return {\r\n      type: ActionTypes.SET_GAME_WORD,\r\n      payload: word\r\n    }\r\n  },\r\n\r\n  startGuess: (player: string) => {\r\n    return {\r\n      type: ActionTypes.SET_GUESSING,\r\n      payload: {\r\n        playerName: player,\r\n        guessing: true\r\n      }\r\n    }\r\n  },\r\n\r\n  endGuess: () => {\r\n    return {\r\n      type: ActionTypes.SET_GUESSING,\r\n      payload: {\r\n        guessing: false\r\n      }\r\n    }\r\n  },\r\n\r\n  submitGuess: (correct: boolean) => {\r\n    return {\r\n      type: ActionTypes.SET_CORRECT_GUESS,\r\n      payload: correct\r\n    }\r\n  },\r\n\r\n  endGame: (spy: string) => {\r\n    return {\r\n      type: ActionTypes.END_GAME,\r\n      payload: spy\r\n    }\r\n  },\r\n\r\n  setState: (state: Partial<IPlayerState>) => {\r\n    return {\r\n      type: ActionTypes.SET_STATE,\r\n      payload: state\r\n    }\r\n  }\r\n}\r\n\r\nexport default Actions;\r\n","import { ILine, IPlayerRole, IServerMessage } from \"../interfaces/Interfaces\";\r\n\r\nconst ip = \"172.16.11.176\";\r\nconst port = \"8081\";\r\nconst protocol = window.location.protocol === \"https\" ? \"wss\" : \"ws\";\r\nconst socket = new WebSocket(`${protocol}://${ip}:${port}`);\r\n\r\nexport async function parseTextResponse(response: Response): Promise<string> {\r\n\tif (response.body) {\r\n\t\tconst reader = response.body.getReader();\r\n\t\tconst result = await reader.read();\r\n\t\treturn new TextDecoder(\"utf-8\").decode(result.value)\r\n\t}\r\n\treturn \"\";\r\n}\r\n\r\nexport async function pingServer(): Promise<boolean> {\r\n\treturn new Promise<boolean>(resolve => {\r\n\t\tsocket.addEventListener(\"open\", () => {\r\n\t\t\tresolve(true);\r\n\t\t});\r\n\t}).catch(e => {\r\n\t\tconsole.error(e);\r\n\t\treturn false;\r\n\t});\r\n}\r\n\r\nexport function generateRoomCode(name: string) {\r\n\tconst content = { player: name };\r\n\tsocket.send(JSON.stringify({ type: \"NewRoom\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function submitRoomCode(code: string, player: string) {\r\n\tconst content = { code: code, player: player };\r\n\tsocket.send(JSON.stringify({ type: \"ConnectRoom\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function setPlayerColour(code: string, playerName: string, colour: string) {\r\n\tconst content = { code: code, name: playerName, colour: colour };\r\n\tsocket.send(JSON.stringify({ type: \"SetPlayerColour\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function startRoomGame(code: string) {\r\n\tconst content = { code: code };\r\n\tsocket.send(JSON.stringify({ type: \"StartGame\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function submitLines(code: string, player: string, lines: ILine[], strokeStyle: string, lineWidth: number) {\r\n\tconst content = { code: code, player: player, lines: lines, strokeStyle: strokeStyle, lineWidth: lineWidth };\r\n\tsocket.send(JSON.stringify({ type: \"Draw\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function getRole(code: string, player: string, possibleRoles: IPlayerRole[]) {\r\n\tconst content = { code: code, name: player, possibleRoles: possibleRoles };\r\n\tsocket.send(JSON.stringify({ type: \"GetRole\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function getGameWord(code: string, playerName: string) {\r\n\tconst content = { code: code, name: playerName };\r\n\tsocket.send(JSON.stringify({ type: \"GetWord\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function getFirstPlayer(code: string) {\r\n\tconst content = { code: code };\r\n\tsocket.send(JSON.stringify({ type: \"GetFirstPlayer\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function endTurn(code: string) {\r\n\tconst content = { code: code };\r\n\tsocket.send(JSON.stringify({ type: \"EndTurn\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function startGuess(code: string, playerName: string) {\r\n\tconst content = { code: code, name: playerName };\r\n\tsocket.send(JSON.stringify({ type: \"StartGuess\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function endGuess(code: string) {\r\n\tconst content = { code: code };\r\n\tsocket.send(JSON.stringify({ type: \"EndGuess\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function submitGuess(code: string, guessedName: string) {\r\n\tconst content = { code: code, guessedName: guessedName };\r\n\tsocket.send(JSON.stringify({ type: \"SubmitGuess\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function getState(code: string, playerName: string) {\r\n\tconst content = { code: code, name: playerName };\r\n\tsocket.send(JSON.stringify({ type: \"GetState\", content: JSON.stringify(content) }));\r\n}\r\n\r\nexport function listenForMessage(callback: (data: IServerMessage) => void) {\r\n\tsocket.addEventListener(\"message\", event => {\r\n\t\tif (event.data) {\r\n\t\t\tcallback(JSON.parse(event.data));\r\n\t\t}\r\n\t});\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Actions from \"../../redux/actions/Actions\";\r\nimport { submitRoomCode, generateRoomCode } from \"../../utils/serverUtils\";\r\n\r\nconst ClassName = {\r\n  container: \"container-roomConnect\",\r\n}\r\n\r\nconst RoomConnect = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [code, setCode] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const history = useHistory();\r\n\r\n  // const iconPath = process.env.PUBLIC_URL + \"/assets/\";\r\n\r\n  return (\r\n    <div className={ClassName.container}>\r\n      <div>\r\n        <TextField\r\n          value={name}\r\n          color=\"primary\"\r\n          placeholder=\"Enter player name\"\r\n          onChange={event => setName(event.target.value)}\r\n          fullWidth={true}\r\n          inputProps={{\r\n            style: { fontSize: \"calc(10px + 2vmin)\" }\r\n          }}\r\n        />\r\n      </div>\r\n      <p>\r\n        Connect to existing room\r\n      </p>\r\n      <div>\r\n        <TextField\r\n          value={code}\r\n          color=\"primary\"\r\n          placeholder=\"Enter room code\"\r\n          onChange={event => setCode(event.target.value)}\r\n          fullWidth={true}\r\n          inputProps={{\r\n            style: { fontSize: \"calc(10px + 2vmin)\" }\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            dispatch(Actions.setPlayers([ name ]));\r\n            dispatch(Actions.setName(name));\r\n            dispatch(Actions.setRoom(code));\r\n            submitRoomCode(code, name);\r\n            history.push(\"/room\");\r\n          }}\r\n          fullWidth={true}\r\n          style={{ fontSize: \"calc(10px + 2vmin)\" }}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </div>\r\n      <p>\r\n        Create new room\r\n      </p>\r\n      <div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={ () => {\r\n            generateRoomCode(name);\r\n            dispatch(Actions.setName(name));\r\n            history.push(\"/room\");\r\n          }}\r\n          fullWidth={true}\r\n          style={{ fontSize: \"calc(10px + 2vmin)\" }}\r\n        >\r\n          New Room\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RoomConnect;\r\n","import React from \"react\";\r\nimport RoomConnect from \"./RoomConnect\";\r\n\r\nconst Landing = () => {\r\n  console.log(\"Connected\");\r\n  return (\r\n    <>\r\n      <div className=\"Banner\">\r\n        <div className=\"PageTitle\">\r\n          Spy Draw\r\n        </div>\r\n      </div>\r\n      <RoomConnect />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","import React from \"react\";\r\nimport { ReactReduxContext } from \"react-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { IPlayerState } from \"../../interfaces/Interfaces\";\r\n\r\nconst ClassName = {\r\n  item: \"item-playerList\",\r\n  row: \"row-playerList\"\r\n}\r\n\r\nconst PlayerList = () => {\r\n  return (\r\n    <ReactReduxContext.Consumer>\r\n      {({ store }) => {\r\n        const state = store.getState();\r\n        return (\r\n          <>\r\n            <div className={ClassName.row}>\r\n              <div>\r\n                {\r\n                  state.name\r\n                }\r\n              </div>\r\n              {\r\n                !!state.playerColourMap[state.name] &&\r\n                  <div\r\n                    className={ClassName.item}\r\n                    style={{ background: state.playerColourMap[state.name] }}\r\n                  />\r\n              }\r\n            </div>\r\n            <div>\r\n              {\r\n                state.players.map((name: string, index: number) => {\r\n                  if (state.name !== name) {\r\n                    return (\r\n                      <>\r\n                        <div className={ClassName.row} key={ index }>\r\n                          <p>{ name }</p>\r\n                          {\r\n                            !!state.playerColourMap[name] &&\r\n                              <div\r\n                                className={ClassName.item}\r\n                                style={{ background: state.playerColourMap[name] }}\r\n                              />\r\n                          }\r\n                        </div>\r\n                      </>\r\n                    );\r\n                  }\r\n                })\r\n              }\r\n            </div>\r\n          </>\r\n        )\r\n      }}\r\n    </ReactReduxContext.Consumer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: IPlayerState) => {\r\n  return {\r\n    players: state.players,\r\n    playerColourMap: state.playerColourMap\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PlayerList);\r\n","import React from \"react\";\r\nimport { ReactReduxContext } from \"react-redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { setPlayerColour } from \"../../utils/serverUtils\";\r\nimport { IPlayerColourMap, IPlayerState } from \"../../interfaces/Interfaces\";\r\n\r\nconst ClassName = {\r\n  container: \"container-colourPicker\",\r\n  item: \"item-colourPicker\",\r\n  palette: \"palette-colourPicker\",\r\n}\r\n\r\nconst colours = [\r\n  \"green\",\r\n  \"blue\",\r\n  \"red\",\r\n  \"yellow\",\r\n  \"orange\",\r\n  \"black\",\r\n]\r\n\r\nconst ColourPicker = () => {\r\n\r\n  const setColour = (roomCode: string, playerName: string, obj: HTMLDivElement) => {\r\n\t\tsetPlayerColour(roomCode, playerName, obj.id);\r\n\t}\r\n\r\n  const isColourAvailable = (colour: string, playerColourMap: IPlayerColourMap): boolean => {\r\n    for (const player in playerColourMap) {\r\n      if (playerColourMap[player] === colour) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return (\r\n    <ReactReduxContext.Consumer>\r\n      {({ store }) => {\r\n        const state = store.getState();\r\n        return (\r\n        \t<div className={ClassName.container}>\r\n        \t\t\t<div>Choose Color</div>\r\n              <div className={ClassName.palette}>\r\n                {\r\n                  colours.map((colour, index) => {\r\n                    return isColourAvailable(colour, state.playerColourMap) &&\r\n              \t\t\t   <div\r\n                        onClick={ e => setColour(state.room, state.name, e.target as HTMLDivElement) }\r\n                        style={{ background: colour }}\r\n                        id={colour}\r\n                        key={index}\r\n                        className={ClassName.item}\r\n                      >\r\n                      </div>\r\n                  })\r\n                }\r\n              </div>\r\n        \t</div>\r\n      \t);\r\n      }}\r\n    </ReactReduxContext.Consumer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: IPlayerState) => {\r\n  return {\r\n    room: state.room,\r\n    name: state.name,\r\n    players: state.players,\r\n    playerColourMap: state.playerColourMap,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ColourPicker);\r\n","import React from \"react\";\r\nimport { ReactReduxContext, connect } from \"react-redux\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PlayerList from \"./PlayerList\";\r\nimport ColourPicker from \"./ColourPicker\";\r\nimport { startRoomGame } from \"../../utils/serverUtils\";\r\nimport { IPlayerState } from \"../../interfaces/Interfaces\";\r\n\r\nconst ClassName = {\r\n  container: \"container-room\",\r\n}\r\n\r\nfunction Room() {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <ReactReduxContext.Consumer>\r\n      {({ store }) => {\r\n        const state = store.getState();\r\n        if (location.pathname !== \"game\" && state.playing) {\r\n          history.push(\"/game\");\r\n        }\r\n        return (\r\n          <div className={ClassName.container}>\r\n            <p>\r\n              Room: { state.room }\r\n            </p>\r\n            <PlayerList />\r\n            <ColourPicker />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                startRoomGame(state.room);\r\n              }}\r\n              fullWidth={true}\r\n              style={{ fontSize: \"calc(10px + 2vmin)\" }}\r\n            >\r\n              Start game\r\n            </Button>\r\n          </div>\r\n        );\r\n      }}\r\n    </ReactReduxContext.Consumer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: IPlayerState) => {\r\n  return {\r\n    room: state.room,\r\n    playing: state.playing\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Room);\r\n","import React from \"react\";\r\n\r\ninterface IProps {\r\n  setStrokeStyle: (id: string) => void;\r\n  setLineWidth: (width: number) => void;\r\n}\r\n\r\nfunction Palette(props: IProps) {\r\n\r\n\tconst setColor = (obj: HTMLDivElement) => {\r\n\t\tprops.setStrokeStyle(obj.id);\r\n\t\tif (obj.id === \"white\") {\r\n\t\t\tprops.setLineWidth(14);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tprops.setLineWidth(2);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n  \t<>\r\n  \t\t\t<div onClick={ e => setColor(e.target as HTMLDivElement) }>Choose Color</div>\r\n  \t\t\t<div onClick={ e => setColor(e.target as HTMLDivElement) } style={{ width: \"10px\", height: \"10px\", background: \"green\" }} id=\"green\"></div>\r\n  \t\t\t<div onClick={ e => setColor(e.target as HTMLDivElement) } style={{ width: \"10px\", height: \"10px\", background: \"blue\" }} id=\"blue\"></div>\r\n  \t\t\t<div onClick={ e => setColor(e.target as HTMLDivElement) } style={{ width: \"10px\", height: \"10px\", background: \"red\" }} id=\"red\"></div>\r\n  \t\t\t<div onClick={ e => setColor(e.target as HTMLDivElement) } style={{ width: \"10px\", height: \"10px\", background: \"yellow\" }} id=\"yellow\"></div>\r\n  \t\t\t<div onClick={ e => setColor(e.target as HTMLDivElement) } style={{ width: \"10px\", height: \"10px\", background: \"orange\" }} id=\"orange\"></div>\r\n  \t\t\t<div onClick={ e => setColor(e.target as HTMLDivElement) } style={{ width: \"10px\", height: \"10px\", background: \"black\" }} id=\"black\"></div>\r\n  \t</>\r\n\t);\r\n}\r\n\r\nexport default Palette;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IPlayerColourMap, IPlayerState, ILine, ILineFromPlayer, ILineWithStyle } from \"../../interfaces/Interfaces\";\r\nimport { submitLines } from \"../../utils/serverUtils\";\r\nimport Palette from \"./Palette\";\r\n\r\ninterface IProps {\r\n  canDraw: boolean;\r\n  showPalette: boolean;\r\n  onEndStroke: () => void;\r\n}\r\n\r\nfunction Canvas(props: IProps) {\r\n\tconst lines = useSelector<IPlayerState>(state => state.canvasLines) as ILineFromPlayer[];\r\n\tconst roomCode = useSelector<IPlayerState>(state => state.room) as string;\r\n\tconst playerName = useSelector<IPlayerState>(state => state.name) as string;\r\n  const playerColourMap = useSelector<IPlayerState>(state => state.playerColourMap) as IPlayerColourMap;\r\n\tuseSelector<IPlayerState>(state => state.role) as string;\r\n\r\n\tlet strokeStyle = \"black\";\r\n\tlet lineWidth = 2;\r\n\tconst line: ILine = {\r\n\t\tstartX: 0,\r\n\t\tstartY: 0,\r\n\t\tendX: 0,\r\n\t\tendY: 0\r\n\t}\r\n\tlet linesToSend: ILine[] = [];\r\n\tlet alreadySent = false; // If mouseUp, send straight away so this prevents the timer sending\r\n\tlet dotFlag = false;\r\n  let pressedFlag = false;\r\n\r\n\tlet canvas: HTMLCanvasElement;\r\n\tlet ctx: CanvasRenderingContext2D;\r\n\r\n\tuseEffect(() => {\r\n    canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n\t\tif (canvas && props.canDraw) {\r\n      setCanvas();\r\n\t\t\tcanvas.addEventListener(\"mousemove\", handleMouseMove);\r\n\t\t\tcanvas.addEventListener(\"mousedown\", handleMouseDown);\r\n\t\t\tcanvas.addEventListener(\"mouseup\", handleMouseUp);\r\n\t\t\tcanvas.addEventListener(\"mouseout\", handleMouseOut);\r\n      canvas.addEventListener(\"touchmove\", handleMouseMove);\r\n\t\t\tcanvas.addEventListener(\"touchstart\", handleMouseDown);\r\n\t\t\tcanvas.addEventListener(\"touchend\", handleMouseUp);\r\n\t\t\tcanvas.addEventListener(\"touchcancel\", handleMouseOut);\r\n\t\t}\r\n    addLinesFromServer();\r\n    return function cleanup() {\r\n      canvas.removeEventListener(\"mousemove\", handleMouseMove);\r\n      canvas.removeEventListener(\"mousedown\", handleMouseDown);\r\n      canvas.removeEventListener(\"mouseup\", handleMouseUp);\r\n      canvas.removeEventListener(\"mouseout\", handleMouseOut);\r\n      canvas.removeEventListener(\"touchmove\", handleMouseMove);\r\n\t\t\tcanvas.removeEventListener(\"touchstart\", handleMouseDown);\r\n\t\t\tcanvas.removeEventListener(\"touchend\", handleMouseUp);\r\n\t\t\tcanvas.removeEventListener(\"touchcancel\", handleMouseOut);\r\n    }\r\n  }, [props.canDraw]);\r\n\r\n  const handleMouseDown = (e: Event) => {\r\n    pressedFlag = true;\r\n    alreadySent = false;\r\n    setTimeout(() => {\r\n      if (!alreadySent) {\r\n        const adjustedLines = resizeLinesForServer(linesToSend);\r\n        submitLines(roomCode, playerName, adjustedLines, strokeStyle, lineWidth);\r\n        linesToSend = [];\r\n      }\r\n    }, 1000);\r\n    line.startX = line.endX;\r\n    line.startY = line.endY;\r\n    if ((e as MouseEvent).clientX) {\r\n      line.endX = (e as MouseEvent).clientX - canvas.offsetLeft;\r\n      line.endY = (e as MouseEvent).clientY - canvas.offsetTop;\r\n    } else if ((e as TouchEvent).touches) {\r\n      line.endX = (e as TouchEvent).touches[0].clientX - canvas.offsetLeft;\r\n      line.endY = (e as TouchEvent).touches[0].clientY - canvas.offsetTop;\r\n    }\r\n\r\n    dotFlag = true;\r\n    // TODO: send this drawing to server\r\n    if (dotFlag) {\r\n      ctx.beginPath();\r\n      ctx.fillStyle = strokeStyle;\r\n      ctx.fillRect(line.endX, line.endY, 2, 2);\r\n      ctx.closePath();\r\n      dotFlag = false;\r\n    }\r\n  }\r\n\r\n  const handleMouseMove = (e: Event) => {\r\n    e.preventDefault();\r\n    if (pressedFlag) {\r\n      line.startX = line.endX;\r\n      line.startY = line.endY;\r\n      if ((e as MouseEvent).clientX) {\r\n        line.endX = (e as MouseEvent).clientX - canvas.offsetLeft;\r\n        line.endY = (e as MouseEvent).clientY - canvas.offsetTop;\r\n      } else if ((e as TouchEvent).touches) {\r\n        line.endX = (e as TouchEvent).touches[0].clientX - canvas.offsetLeft;\r\n        line.endY = (e as TouchEvent).touches[0].clientY - canvas.offsetTop;\r\n      }\r\n      linesToSend.push(Object.assign({}, line));\r\n      draw(line);\r\n    }\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    if (pressedFlag && !alreadySent) {\r\n      const adjustedLines = resizeLinesForServer(linesToSend);\r\n      submitLines(roomCode, playerName, adjustedLines, strokeStyle, lineWidth);\r\n      linesToSend = [];\r\n      props.onEndStroke();\r\n    }\r\n    pressedFlag = false;\r\n  }\r\n\r\n  const handleMouseOut = () => {\r\n    handleMouseUp();\r\n  }\r\n\r\n\tconst draw = (line: ILine | ILineFromPlayer | ILineWithStyle) => {\r\n\t\tsetCanvas();\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(line.startX, line.startY);\r\n\t\tctx.lineTo(line.endX, line.endY);\r\n    if (\"playerName\" in line) {\r\n\t\t\tctx.strokeStyle = playerColourMap[line.playerName];\r\n    } else if (playerColourMap[playerName]) {\r\n\t\t\tctx.strokeStyle = playerColourMap[playerName];\r\n\t\t} else if (\"strokeStyle\" in line) {\r\n\t\t\tctx.strokeStyle = line.strokeStyle;\r\n\t\t} else {\r\n\t\t\tctx.strokeStyle = strokeStyle;\r\n\t\t}\r\n\t\tif (\"lineWidth\" in line) {\r\n\t\t\tctx.lineWidth = line.lineWidth;\r\n\t\t} else {\r\n\t\t\tctx.lineWidth = lineWidth;\r\n\t\t}\r\n\t\tctx.stroke();\r\n\t\tctx.closePath();\r\n\t}\r\n\r\n\tconst addLinesFromServer = () => {\r\n    const adjustedLines = resizeLinesForCanvas(lines);\r\n\t\tfor (const line of adjustedLines) {\r\n\t\t\tdraw(line);\r\n\t\t}\r\n\t}\r\n\r\n\tconst setCanvas = () => {\r\n\t\tif (!ctx) {\r\n\t\t\tif (!canvas) {\r\n\t\t\t\tcanvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n\t\t\t}\r\n\t\t\tctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\t\t}\r\n\t}\r\n\r\n  const setStrokeStyle = (id: string) => {\r\n    strokeStyle = id;\r\n  }\r\n\r\n  const setLineWidth = (width: number) => {\r\n    lineWidth = width;\r\n  }\r\n\r\n  let canvasWidth = 0.8 * window.innerWidth;\r\n  let canvasHeight = canvasWidth;\r\n  if (canvasHeight > window.innerHeight) {\r\n    canvasWidth = 0.6 * window.innerHeight;\r\n    canvasHeight = canvasWidth;\r\n  }\r\n\r\n  const resizeLinesForCanvas = (lines: ILineFromPlayer[]): ILineFromPlayer[] => {\r\n    const adjustedLines: ILineFromPlayer[] = [];\r\n    for (const line of lines) {\r\n      adjustedLines.push({\r\n        startX: line.startX * canvasWidth,\r\n        endX: line.endX * canvasWidth,\r\n        startY: line.startY * canvasHeight,\r\n        endY: line.endY * canvasHeight,\r\n        playerName: line.playerName,\r\n      });\r\n    }\r\n    return adjustedLines;\r\n  }\r\n\r\n  const resizeLinesForServer = (lines: ILine[]): ILine[] => {\r\n    const adjustedLines = [];\r\n    for (const line of lines) {\r\n      adjustedLines.push({\r\n        startX: line.startX / canvasWidth,\r\n        endX: line.endX / canvasWidth,\r\n        startY: line.startY / canvasHeight,\r\n        endY: line.endY / canvasHeight,\r\n      });\r\n    }\r\n    return adjustedLines;\r\n  }\r\n\r\n  window.onresize = () => {\r\n    // TODO: re-render to adjust canvas size\r\n  }\r\n\r\n\treturn (\r\n  \t<>\r\n  \t\t\t<canvas\r\n          id=\"canvas\"\r\n          width={canvasWidth}\r\n          height={canvasHeight}\r\n          style={{\r\n            border: \"2px solid\"\r\n          }}\r\n        />\r\n        {\r\n          props.showPalette &&\r\n    \t\t\t<Palette\r\n            setStrokeStyle={id => setStrokeStyle(id)}\r\n            setLineWidth={width => setLineWidth(width)}\r\n          />\r\n        }\r\n  \t\t\t<img id=\"canvasimg\" style={{ position: \"absolute\", top: \"10%\", left: \"52%\" }} />\r\n  \t</>\r\n\t);\r\n}\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\nimport \"../../styles/styles.css\"\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { submitGuess } from \"../../utils/serverUtils\";\r\nimport { IPlayerColourMap } from \"../../interfaces/Interfaces\";\r\n\r\ninterface IProps {\r\n  name: string;\r\n  room: string;\r\n  playerNames: string[];\r\n  open: boolean;\r\n  onClose: () => void;\r\n  guessingPlayer: string;\r\n  playerColourMap: IPlayerColourMap;\r\n}\r\n\r\nconst ClassName = {\r\n  container: \"modal-body\"\r\n}\r\n\r\nfunction GuessSpyPanel(props: IProps) {\r\n  const onSubmit = (name: string) => {\r\n    submitGuess(props.room, name);\r\n    props.onClose();\r\n  }\r\n\r\n\treturn (\r\n    <Modal\r\n      open={props.open}\r\n      onClose={props.onClose}\r\n      aria-labelledby=\"simple-modal-title\"\r\n      aria-describedby=\"simple-modal-description\"\r\n    >\r\n      {\r\n        <div className={ClassName.container}>\r\n          {\r\n            props.guessingPlayer === props.name ?\r\n              props.playerNames.map((name, index) => {\r\n                if (name !== props.name) {\r\n                  return <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => onSubmit(name)}\r\n                    key={index}\r\n                    style={{\r\n                      backgroundColor: props.playerColourMap ? props.playerColourMap[name] : \"black\",\r\n                      color: \"#fff\"\r\n                    }}\r\n                  >\r\n                    {name}\r\n                  </Button>\r\n                }\r\n              })\r\n            :\r\n              <div>{props.guessingPlayer} is guessing!</div>\r\n          }\r\n        </div>\r\n      }\r\n    </Modal>\r\n\t);\r\n}\r\n\r\nexport default GuessSpyPanel;\r\n","import React from \"react\";\r\nimport \"../../styles/styles.css\"\r\nimport Button from \"@material-ui/core/Button\";\r\nimport GuessSpyPanel from \"./GuessSpyPanel\";\r\nimport { endGuess, startGuess } from \"../../utils/serverUtils\";\r\nimport { IPlayerColourMap } from \"../../interfaces/Interfaces\";\r\n\r\ninterface IProps {\r\n\troom: string;\r\n\tname: string;\r\n\trole: string;\r\n\tplayerNames: string[];\r\n\tguessingPlayer: string;\r\n\tplayerColourMap: IPlayerColourMap\r\n\tword?: string;\r\n}\r\n\r\nconst ClassName = \"container-infoPanel\";\r\n\r\nfunction InfoPanel(props: IProps) {\r\n\tconst onGuessPressed = () => {\r\n\t\tstartGuess(props.room, props.name);\r\n\t}\r\n\r\n\tconst onClose = () => {\r\n\t\tendGuess(props.room);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={ClassName}>\r\n\t\t\t<div>Room: {props.room}</div>\r\n\t\t\t<div>Role: {props.role}</div>\r\n\t\t\t{\r\n\t\t\t\t!!props.word &&\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<div>Word: {props.word}</div>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\tonClick={() => onGuessPressed()}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tGuess the spy\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</>\r\n\t\t\t}\r\n\t\t\t<GuessSpyPanel\r\n\t\t\t\tkey={props.guessingPlayer}\r\n\t\t\t\tname={props.name}\r\n\t\t\t\troom={props.room}\r\n\t\t\t\tplayerNames={props.playerNames}\r\n\t\t\t\topen={!!props.guessingPlayer}\r\n\t\t\t\tonClose={() => onClose()}\r\n\t\t\t\tguessingPlayer={props.guessingPlayer}\r\n\t\t\t\tplayerColourMap={props.playerColourMap}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default InfoPanel;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../../styles/styles.css\"\r\n\r\ninterface IProps {\r\n\tstartingSeconds: number,\r\n  gameEnded: boolean,\r\n}\r\n\r\nconst ClassName = \"container-infoPanel\";\r\n\r\nfunction Timer(props: IProps) {\r\n  const [ timerSeconds, setTimerSeconds ] = useState<number>(props.startingSeconds);\r\n\r\n  useEffect(() => {\r\n    if (timerSeconds > 0 && !props.gameEnded) {\r\n      setTimeout(() => {\r\n        setTimerSeconds(timerSeconds - 1);\r\n      }, 1000);\r\n    }\r\n  });\r\n\r\n  const convertSecondsToTimer = (seconds: number): string => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds - minutes * 60;\r\n    const minutesDisplay = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n    const secondsDisplay = remainingSeconds < 10 ? `0${remainingSeconds}` : `${remainingSeconds}`;\r\n    return `${minutesDisplay}:${secondsDisplay}`;\r\n  }\r\n\r\n\treturn (\r\n\t\t<div className={ClassName}>\r\n      <span id=\"time\">{ convertSecondsToTimer(timerSeconds) }</span>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport \"../../styles/styles.css\"\r\n\r\ninterface IProps {\r\n  guessedSpy: boolean;\r\n  spy: string;\r\n  playerName: string;\r\n}\r\n\r\nconst ClassName = \"container-gameEnd\";\r\n\r\nfunction GameEnd(props: IProps) {\r\n  const renderGameEnd = (): JSX.Element => {\r\n    if (props.guessedSpy && props.spy === props.playerName) {\r\n      return <div>Guess the word!</div>\r\n    } else if (props.guessedSpy) {\r\n      return <div>{props.spy}, guess the word!</div>\r\n    } else if (props.spy === props.playerName) {\r\n      return <div>{props.spy} wins!</div>\r\n    }\r\n    return <div>You win!</div>\r\n  }\r\n\r\n\treturn (\r\n\t\t<div className={ClassName}>\r\n      { renderGameEnd() }\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default GameEnd;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IPlayerColourMap, IPlayerRole, IPlayerState } from \"../../interfaces/Interfaces\";\r\nimport { endTurn, getFirstPlayer, getGameWord, getRole, getState } from \"../../utils/serverUtils\";\r\nimport Actions from \"../../redux/actions/Actions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Canvas from \"../canvas/Canvas\";\r\nimport InfoPanel from \"./InfoPanel\";\r\nimport Timer from \"./Timer\";\r\nimport GameEnd from \"./GameEnd\";\r\nimport * as SessionStorageUtils from \"../../utils/sessionStorageUtils\";\r\n\r\nconst DEFAULT_ROLE = \"Friend\";\r\n\r\nconst EXTRA_ROLES: IPlayerRole[] = [\r\n  {\r\n    roleName: \"Spy\",\r\n    roleCount: 1\r\n  }\r\n]\r\n\r\ninterface IGameState {\r\n  time: number,\r\n  roomCode: string,\r\n  word: string,\r\n  playerName: string,\r\n  possibleRoles: IPlayerRole[],\r\n  players: string[],\r\n  activePlayer: string,\r\n  guessingPlayer: string,\r\n  role: string,\r\n  playerColourMap: IPlayerColourMap,\r\n  gameEnded: boolean,\r\n  guessedSpy: boolean,\r\n  spy: string,\r\n  playing: boolean,\r\n}\r\n\r\nfunction Game() {\r\n\tconst dispatch = useDispatch();\r\n\r\n  const gameState = useSelector<IPlayerState>(state => (\r\n    {\r\n      time: state.time,\r\n      roomCode: state.room,\r\n      word: state.gameWord,\r\n      playerName: state.name,\r\n      possibleRoles: state.possibleRoles,\r\n      players: state.players,\r\n      activePlayer: state.activePlayer,\r\n      guessingPlayer: state.guessingPlayer,\r\n      role: state.role,\r\n      gameEnded: state.gameEnded,\r\n      guessedSpy: state.guessedSpy,\r\n      spy: state.spy,\r\n      playing: state.playing,\r\n    }\r\n  )) as IGameState;\r\n\r\n\tuseEffect(() => {\r\n\t\tif (gameState.possibleRoles.length === 0) {\r\n      if (gameState.playerName && gameState.roomCode) {\r\n        SessionStorageUtils.setPlayerInfo({\r\n          name: gameState.playerName,\r\n          room: gameState.roomCode\r\n        })\r\n      }\r\n\t\t\tconst playerCount = Object.keys(gameState.players).length;\r\n\t\t\tlet totalExtraRoles = 0;\r\n\t\t\tfor (const role of EXTRA_ROLES) {\r\n\t\t\t\ttotalExtraRoles += role.roleCount;\r\n\t\t\t}\r\n\t\t\tconst defaultRole: IPlayerRole = {\r\n\t\t\t\troleName: DEFAULT_ROLE,\r\n\t\t\t\troleCount: playerCount - totalExtraRoles\r\n\t\t\t}\r\n\t\t\tconst allRoles = EXTRA_ROLES.concat(defaultRole);\r\n\t\t\tdispatch(Actions.setPossibleRoles(allRoles));\r\n      if (gameState.playing) {\r\n  \t\t\tgetRole(gameState.roomCode, gameState.playerName, allRoles);\r\n  \t\t\tgetGameWord(gameState.roomCode, gameState.playerName);\r\n        getFirstPlayer(gameState.roomCode);\r\n      } else {\r\n        const info = SessionStorageUtils.getPlayerInfo();\r\n        getState(info.room, info.name);\r\n        dispatch(Actions.setPlaying(true));\r\n      }\r\n\t\t}\r\n  });\r\n\r\n  const isActivePlayer = () => {\r\n    return gameState.playerName === gameState.activePlayer;\r\n  }\r\n\r\n\tconst onEndStroke = () => {\r\n\t\tendTurn(gameState.roomCode);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n      <Timer\r\n        startingSeconds={gameState.time}\r\n        gameEnded={gameState.gameEnded}\r\n      />\r\n      {\r\n        !gameState.gameEnded ?\r\n          <>\r\n            {\r\n              isActivePlayer() ?\r\n                <p>\r\n                  Your turn!\r\n                </p>\r\n              :\r\n                <p>\r\n                  {gameState.activePlayer}'s turn'!\r\n                </p>\r\n            }\r\n      \t\t\t{\r\n      \t\t\t\t!!gameState.role ?\r\n      \t\t\t\t\t<>\r\n      \t\t\t\t\t\t<InfoPanel\r\n      \t\t\t\t\t\t\troom={gameState.roomCode}\r\n                    name={gameState.playerName}\r\n      \t\t\t\t\t\t\trole={gameState.role}\r\n      \t\t\t\t\t\t\tword={gameState.word}\r\n                    playerNames={gameState.players}\r\n                    guessingPlayer={gameState.guessingPlayer}\r\n                    playerColourMap={gameState.playerColourMap}\r\n      \t\t\t\t\t\t/>\r\n      \t\t\t\t\t\t<Canvas\r\n                    canDraw={isActivePlayer()}\r\n                    showPalette={false}\r\n      \t\t\t\t\t\t\tonEndStroke={() => onEndStroke()}\r\n                  />\r\n      \t\t\t\t\t</>\r\n      \t\t\t\t:\r\n      \t\t\t\t\t<div>\r\n      \t\t\t\t\t\tAssigning roles...\r\n      \t\t\t\t\t</div>\r\n      \t\t\t}\r\n          </>\r\n        :\r\n          <>\r\n            <GameEnd\r\n              guessedSpy={gameState.guessedSpy}\r\n              spy={gameState.spy}\r\n              playerName={gameState.playerName}\r\n            />\r\n          </>\r\n      }\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Game;\r\n","export interface IPlayerSessionInfo {\r\n  name: string;\r\n  room: string;\r\n}\r\n\r\nexport const SessionStorageKey = \"spydraw_\";\r\n\r\nexport function setPlayerInfo(info: IPlayerSessionInfo): void {\r\n\tsessionStorage.setItem(SessionStorageKey + \"player\", JSON.stringify(info));\r\n}\r\n\r\nexport function getPlayerInfo(): IPlayerSessionInfo {\r\n  return JSON.parse((sessionStorage.getItem(SessionStorageKey + \"player\") as string)) as IPlayerSessionInfo;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Landing from \"./components/landing/Landing\";\r\nimport Room from \"./components/room/Room\";\r\nimport Game from \"./components/game/Game\";\r\nimport Actions from \"./redux/actions/Actions\";\r\nimport \"./App.css\";\r\nimport { IServerMessage, ILine, ILineFromPlayer } from \"./interfaces/Interfaces\";\r\nimport { listenForMessage, pingServer } from \"./utils/serverUtils\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const [ connected, setConnected ] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const attemptConnection = async () => {\r\n      let success = false;\r\n      try {\r\n        success = await pingServer();\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n      if (success) {\r\n        listenForMessage(handleServerMessage);\r\n      }\r\n      if (success !== connected) {\r\n        setConnected(success);\r\n      }\r\n    }\r\n    attemptConnection();\r\n  }, []);\r\n\r\n  const handleServerMessage = (message: IServerMessage) => {\r\n    switch (message.type) {\r\n      case \"NewRoom\":\r\n        let code: string;\r\n        if (!message.content || !message.content.code) {\r\n          code = \"ERROR\"\r\n        } else {\r\n          code = message.content.code;\r\n        }\r\n        dispatch(Actions.setRoom(code));\r\n        break;\r\n      case \"ConnectRoom\":\r\n        dispatch(Actions.setPlayers(message.content.players));\r\n        break;\r\n      case \"SetPlayerColour\":\r\n        dispatch(Actions.setPlayerColour(message.content.name, message.content.colour));\r\n        break;\r\n      case \"StartGame\":\r\n        dispatch(Actions.setTime(message.content.time));\r\n        dispatch(Actions.setPlaying(true));\r\n        break;\r\n      case \"GetRole\":\r\n        dispatch(Actions.setRole(message.content.role));\r\n        break;\r\n      case \"GetWord\":\r\n        dispatch(Actions.setGameWord(message.content.word));\r\n        break;\r\n      case \"Draw\":\r\n        const linesFromPlayer: ILineFromPlayer[] = [];\r\n        for (const line of message.content.lines as ILine[]) {\r\n          linesFromPlayer.push({\r\n            startX: line.startX,\r\n            startY: line.startY,\r\n            endX: line.endX,\r\n            endY: line.endY,\r\n            playerName: message.content.name as string,\r\n          })\r\n        }\r\n        dispatch(Actions.addLines(linesFromPlayer));\r\n        break;\r\n      case \"EndTurn\":\r\n      case \"GetFirstPlayer\":\r\n        dispatch(Actions.setActivePlayer(message.content.activePlayer));\r\n        break;\r\n      case \"StartGuess\":\r\n        dispatch(Actions.startGuess(message.content.name));\r\n        break;\r\n      case \"EndGuess\":\r\n        dispatch(Actions.endGuess());\r\n        break;\r\n      case \"SubmitGuess\":\r\n        dispatch(Actions.submitGuess(message.content.correct));\r\n        break;\r\n      case \"EndGame\":\r\n        dispatch(Actions.endGame(message.content.spy));\r\n        break;\r\n      case \"GetState\":\r\n        dispatch(Actions.setState(message.content.state));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  if (!connected) {\r\n    return (\r\n      <div className=\"App\">\r\n        <p>Failed to connect to server</p>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Landing />\r\n            </Route>\r\n            <Route exact path=\"/room\">\r\n              <Room />\r\n            </Route>\r\n            <Route exact path=\"/game\">\r\n              <Game />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config: any) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl: string = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config: any) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It\"s the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: any) {\r\n  // Check if the service worker can be found. If it can\"t reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as Interfaces from \"../../interfaces/Interfaces\";\r\nimport * as ActionTypes from \"../actions/ActionTypes\";\r\n\r\ntype IReducerFunction = (\r\n  state: Interfaces.IPlayerState | undefined,\r\n  action: any\r\n) => Interfaces.IPlayerState;\r\n\r\nconst initialState: Interfaces.IPlayerState = {\r\n  room: \"\",\r\n  name: \"\",\r\n  players: [],\r\n  playerColourMap: {},\r\n  activePlayer: \"\",\r\n  canvasLines: [],\r\n  playing: false,\r\n  role: \"\",\r\n  possibleRoles: [],\r\n  gameWord: \"\",\r\n  guessingPlayer: \"\",\r\n  time: -1,\r\n  guessedSpy: false,\r\n  gameEnded: false,\r\n  spy: \"\",\r\n};\r\n\r\nconst RootReducer: IReducerFunction = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_ROOM:\r\n      const room = action.payload as string;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\troom: room\r\n\t\t\t};\r\n    case ActionTypes.SET_NAME:\r\n      const name = action.payload as string;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tname: name\r\n\t\t\t};\r\n\t\tcase ActionTypes.ADD_PLAYER:\r\n\t\t\tconst names = action.payload as string[];\r\n      return {\r\n\t\t\t\t...state,\r\n\t\t\t\tplayers: names\r\n\t\t\t};\r\n    case ActionTypes.SET_PLAYER_COLOUR:\r\n\t\t\tconst playerName = (action.payload as Interfaces.IPlayerColourAction).playerName;\r\n      const colour = (action.payload as Interfaces.IPlayerColourAction).colour;\r\n      return {\r\n\t\t\t\t...state,\r\n\t\t\t\tplayerColourMap: {\r\n          ...state.playerColourMap,\r\n          [playerName]: colour\r\n        }\r\n\t\t\t};\r\n    case ActionTypes.SET_POSSIBLE_ROLES:\r\n\t\t\tconst roles = action.payload as Interfaces.IPlayerRole[];\r\n      return {\r\n\t\t\t\t...state,\r\n\t\t\t\tpossibleRoles: roles\r\n\t\t\t};\r\n    case ActionTypes.SET_ROLE:\r\n\t\t\tconst role = action.payload as string;\r\n      return {\r\n\t\t\t\t...state,\r\n\t\t\t\trole: role\r\n\t\t\t};\r\n\t\tcase ActionTypes.SET_PLAYING:\r\n\t\t\tconst playing = action.payload as boolean;\r\n      return {\r\n\t\t\t\t...state,\r\n\t\t\t\tplaying: playing\r\n\t\t\t};\r\n    case ActionTypes.SET_TIME:\r\n      const time = action.payload as number;\r\n      return {\r\n        ...state,\r\n        time: time\r\n      }\r\n    case ActionTypes.ADD_LINES:\r\n      const lines = action.payload as Interfaces.ILineFromPlayer[];\r\n      return {\r\n        ...state,\r\n        canvasLines: [ ...state.canvasLines, ...lines ]\r\n      }\r\n    case ActionTypes.SET_ACTIVE_PLAYER:\r\n      const activePlayer = action.payload as string;\r\n      return {\r\n        ...state,\r\n        activePlayer: activePlayer\r\n      }\r\n    case ActionTypes.SET_GAME_WORD:\r\n      const word = action.payload as string;\r\n      return {\r\n        ...state,\r\n        gameWord: word\r\n      }\r\n    case ActionTypes.SET_GUESSING:\r\n      const guessingPlayer = (action.payload as Interfaces.ISetGuessingAction).playerName;\r\n      const isGuessing = (action.payload as Interfaces.ISetGuessingAction).guessing;\r\n      return {\r\n        ...state,\r\n        guessingPlayer: isGuessing ? guessingPlayer : \"\"\r\n      }\r\n    case ActionTypes.SET_CORRECT_GUESS:\r\n      const guessedSpy = action.payload as boolean;\r\n      return {\r\n        ...state,\r\n        guessedSpy: guessedSpy\r\n      }\r\n    case ActionTypes.END_GAME:\r\n      const spy = action.payload as string;\r\n      return {\r\n        ...state,\r\n        gameEnded: true,\r\n        spy: spy\r\n      }\r\n    case ActionTypes.SET_STATE:\r\n      const partialState = action.payload as Partial<Interfaces.IPlayerState>;\r\n      return {\r\n        ...state,\r\n        ...partialState\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default RootReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createPlayerStore } from \"./redux/datastore/StoreManager\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst store = createPlayerStore();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={ store }>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore } from \"redux\";\r\nimport RootReducer from \"../reducers/RootReducer\";\r\n\r\nexport const createPlayerStore = () => {\r\n  return createStore(RootReducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__());\r\n}\r\n"],"sourceRoot":""}